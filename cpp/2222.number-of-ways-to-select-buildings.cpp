/*
 * @lc app=leetcode id=2222 lang=cpp
 *
 * [2222] Number of Ways to Select Buildings
 *
 * https://leetcode.com/problems/number-of-ways-to-select-buildings/description/
 *
 * algorithms
 * Medium (44.01%)
 * Likes:    918
 * Dislikes: 42
 * Total Accepted:    30.6K
 * Total Submissions: 60.6K
 * Testcase Example:  '"001101"'
 *
 * You are given a 0-indexed binary string s which represents the types of
 * buildings along a street where:
 * 
 * 
 * s[i] = '0' denotes that the i^th building is an office and
 * s[i] = '1' denotes that the i^th building is a restaurant.
 * 
 * 
 * As a city official, you would like to select 3 buildings for random
 * inspection. However, to ensure variety, no two consecutive buildings out of
 * the selected buildings can be of the same type.
 * 
 * 
 * For example, given s = "001101", we cannot select the 1^st, 3^rd, and 5^th
 * buildings as that would form "011" which is not allowed due to having two
 * consecutive buildings of the same type.
 * 
 * 
 * Return the number of valid ways to select 3 buildings.
 * 
 * 
 * Example 1:
 * 
 * 
 * Input: s = "001101"
 * Output: 6
 * Explanation: 
 * The following sets of indices selected are valid:
 * - [0,2,4] from "001101" forms "010"
 * - [0,3,4] from "001101" forms "010"
 * - [1,2,4] from "001101" forms "010"
 * - [1,3,4] from "001101" forms "010"
 * - [2,4,5] from "001101" forms "101"
 * - [3,4,5] from "001101" forms "101"
 * No other selection is valid. Thus, there are 6 total ways.
 * 
 * 
 * Example 2:
 * 
 * 
 * Input: s = "11100"
 * Output: 0
 * Explanation: It can be shown that there are no valid selections.
 * 
 * 
 * 
 * Constraints:
 * 
 * 
 * 3 <= s.length <= 10^5
 * s[i] is either '0' or '1'.
 * 
 * 
 */

// @lc code=start
class Solution {
public:
    long long straightForward(string& s){
        vector<int> data;
        int i = 0;
        while(i<s.size()){
            int count = 1;
            i++;
            while(i<s.size() && s[i]==s[i-1]){
                count++;
                i++;
            }
            data.emplace_back(count);
        }
        
        long long res = 0;
        for(int i=0; i<data.size(); ++i){
            for(int j=i+1; j<data.size(); j+=2){
                for(int k=j+1; k<data.size(); k+=2){
                    res += data[i] * data[j] * data[k];
                }
            }
        }
        return res;

    }

    long long dp[100001][4][3];
    long long solve(char prev,int i,int k,string &s){
        if(k == 0) return 1;
        if(i == s.size()) return 0;
        if(dp[i][k][prev - '0'] != -1) return dp[i][k][prev - '0'];
        
        long long op1 = 0;
        if(s[i] != prev) op1 = solve(s[i],i+1,k-1,s);
        long long op2 = solve(prev,i+1,k,s);
        return dp[i][k][prev - '0'] = op1 + op2;
    }
    long long dfsDP(string s) {
        memset(dp,-1,sizeof dp);
        return solve('2',0,3,s);
    }

    long long countOnesAndZeros(string& s){
        int size = s.size();
        if (size == 0){
            return 0;
        }
        long long zeroes = 0, ones = 0, zeroesBeforeOne = 0, onesBeforeZero = 0, totalWays = 0;
        for(int i = 0; i < size; i++){
            if(s[i] == '0'){
                zeroes++;
                onesBeforeZero += ones;
                totalWays = totalWays + zeroesBeforeOne;
            }else{
                ones++;
                zeroesBeforeOne += zeroes;
                totalWays = totalWays + onesBeforeZero;
            }
            printf("zero: %d, one: %d, zerobeforeone: %d, onebeforezero: %d, total: %d\n", zeroes, ones, zeroesBeforeOne, onesBeforeZero, totalWays);
        }
        return totalWays;
    }
    long long numberOfKWays(string& s, int k){
        
        vector<vector<long long>> ways(k, vector<long long>(2));
        for(int i=0; i<s.size(); ++i){
            int idx = s[i] - '0';
            ++ways[0][idx];
            for(int j=1; j<k; ++j){
                ways[j][idx] += ways[j-1][1-idx];
            }
        }
        return ways[k-1][0] + ways[k-1][1];
    }
    long long numberOfWays(string s) {
        // return straightForward(s); // time limit exceeded
        // return dfsDP(s);
        // return countOnesAndZeros(s);
        return numberOfKWays(s, 3);
    }
};
// @lc code=end
/*
""001101""
""1110011111000011111101000101010101010""

*/

